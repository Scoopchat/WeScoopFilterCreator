
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#pragma arguments
texture2d<float>  cameraTexture;
float backgroundInfluence;
float backgroundAverage;

#pragma opaque
#pragma body

if( !is_null_texture(cameraTexture) )
{
float2 inverseResolution = scn_frame.inverseResolution;
float2 coords = float2(in.fragmentPosition.xy*inverseResolution.xy-1.);
float4 cameraColor = cameraTexture.sample( sampler(coord::normalized,filter::linear,address::clamp_to_zero), float2(1.0 + coords.x,1.0 + coords.y));

float4 textureColor = _output.color;

if(textureColor.w == 0 )
{
//discard_fragment();
_output.color = cameraColor;

} else {

float4 destColor = cameraColor;
float4 sourceColor = textureColor;

float luma = dot(destColor.rgb, float3(0.299, 0.587, 0.114));

float effect = ((luma / (1.0 * backgroundAverage) - 1.0) * backgroundInfluence + 1.0);
sourceColor.rgb *= 1.0 * effect;

sourceColor.a *= textureColor.w;

sourceColor.rgb *= sourceColor.a;
destColor.rgb *= 1.0 - sourceColor.a;

float4 finalColor = float4(0.0);

finalColor.rgb = sourceColor.rgb + destColor.rgb;
finalColor.a = 1.0;//textureColor.a;

_output.color = (float4(mix(_output.color.rgb, finalColor.rgb, finalColor.w   ), 1.0));
//_output.color = finalColor;
}
}



